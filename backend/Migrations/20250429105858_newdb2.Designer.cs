// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebTestUI.Backend.Data;

#nullable disable

namespace WebTestUI.Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250429105858_newdb2")]
    partial class newdb2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AutoLogoutEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompactViewEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CrashReportsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("MarketingEmailsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SessionTimeoutMinutes")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowSidebarEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoFactorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TwoFactorCodeExpiry")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsageAnalyticsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.EnvironmentVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Variables")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "IsActive");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseSize")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("HistoryEntries");
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.K6Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .HasDatabaseName("IX_K6Tests_RequestId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_K6Tests_Status");

                    b.ToTable("K6Tests");
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthConfig")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Headers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebTestUI.Backend.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebTestUI.Backend.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebTestUI.Backend.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebTestUI.Backend.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.Collection", b =>
                {
                    b.HasOne("WebTestUI.Backend.Data.Entities.ApplicationUser", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.EnvironmentVariable", b =>
                {
                    b.HasOne("WebTestUI.Backend.Data.Entities.ApplicationUser", "User")
                        .WithMany("Environments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.History", b =>
                {
                    b.HasOne("WebTestUI.Backend.Data.Entities.Request", "Request")
                        .WithMany("HistoryEntries")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebTestUI.Backend.Data.Entities.ApplicationUser", "User")
                        .WithMany("HistoryEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.K6Test", b =>
                {
                    b.OwnsOne("WebTestUI.Backend.Data.Entities.K6TestError", "ErrorDetails", b1 =>
                        {
                            b1.Property<Guid>("K6TestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Code")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Stack")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("K6TestId");

                            b1.ToTable("K6Tests");

                            b1.WithOwner()
                                .HasForeignKey("K6TestId");
                        });

                    b.OwnsMany("WebTestUI.Backend.Data.Entities.K6TestLog", "Logs", b1 =>
                        {
                            b1.Property<Guid>("K6TestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Data")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Level")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long>("Timestamp")
                                .HasColumnType("bigint");

                            b1.HasKey("K6TestId", "Id");

                            b1.ToTable("K6TestLog");

                            b1.WithOwner()
                                .HasForeignKey("K6TestId");

                            b1.OwnsOne("WebTestUI.Backend.Data.Entities.K6TestError", "Error", b2 =>
                                {
                                    b2.Property<Guid>("K6TestLogK6TestId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("K6TestLogId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Code")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Message")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Stack")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("K6TestLogK6TestId", "K6TestLogId");

                                    b2.ToTable("K6TestLog");

                                    b2.WithOwner()
                                        .HasForeignKey("K6TestLogK6TestId", "K6TestLogId");
                                });

                            b1.Navigation("Error");
                        });

                    b.OwnsOne("WebTestUI.Backend.Data.Entities.K6TestOptions", "Options", b1 =>
                        {
                            b1.Property<Guid>("K6TestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Duration")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Vus")
                                .HasColumnType("int");

                            b1.HasKey("K6TestId");

                            b1.ToTable("K6Tests");

                            b1.WithOwner()
                                .HasForeignKey("K6TestId");
                        });

                    b.OwnsOne("WebTestUI.Backend.Data.Entities.K6TestResults", "Results", b1 =>
                        {
                            b1.Property<Guid>("K6TestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("AverageResponseTime")
                                .HasColumnType("float")
                                .HasAnnotation("Relational:JsonPropertyName", "averageResponseTime");

                            b1.Property<string>("Duration")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "duration");

                            b1.Property<double>("FailureRate")
                                .HasColumnType("float")
                                .HasAnnotation("Relational:JsonPropertyName", "failureRate");

                            b1.Property<double>("P95ResponseTime")
                                .HasColumnType("float")
                                .HasAnnotation("Relational:JsonPropertyName", "p95ResponseTime");

                            b1.Property<double>("RequestsPerSecond")
                                .HasColumnType("float")
                                .HasAnnotation("Relational:JsonPropertyName", "requestsPerSecond");

                            b1.Property<long>("Timestamp")
                                .HasColumnType("bigint")
                                .HasAnnotation("Relational:JsonPropertyName", "timestamp");

                            b1.Property<int>("Vus")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "vus");

                            b1.HasKey("K6TestId");

                            b1.ToTable("K6Tests");

                            b1.WithOwner()
                                .HasForeignKey("K6TestId");

                            b1.OwnsOne("WebTestUI.Backend.Data.Entities.K6TestDetailedMetrics", "DetailedMetrics", b2 =>
                                {
                                    b2.Property<Guid>("K6TestResultsK6TestId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<double>("ChecksRate")
                                        .HasColumnType("float")
                                        .HasAnnotation("Relational:JsonPropertyName", "checksRate");

                                    b2.Property<string>("DataReceived")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "dataReceived");

                                    b2.Property<string>("DataSent")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasAnnotation("Relational:JsonPropertyName", "dataSent");

                                    b2.Property<double>("HttpReqFailed")
                                        .HasColumnType("float")
                                        .HasAnnotation("Relational:JsonPropertyName", "httpReqFailed");

                                    b2.Property<double>("HttpReqRate")
                                        .HasColumnType("float")
                                        .HasAnnotation("Relational:JsonPropertyName", "httpReqRate");

                                    b2.Property<int>("Iterations")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "iterations");

                                    b2.Property<double>("SuccessRate")
                                        .HasColumnType("float")
                                        .HasAnnotation("Relational:JsonPropertyName", "successRate");

                                    b2.HasKey("K6TestResultsK6TestId");

                                    b2.ToTable("K6Tests");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "detailedMetrics");

                                    b2.WithOwner()
                                        .HasForeignKey("K6TestResultsK6TestId");

                                    b2.OwnsOne("WebTestUI.Backend.Data.Entities.HttpReqDurationMetrics", "HttpReqDuration", b3 =>
                                        {
                                            b3.Property<Guid>("K6TestDetailedMetricsK6TestResultsK6TestId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<double>("Avg")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "avg");

                                            b3.Property<double>("Max")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "max");

                                            b3.Property<double>("Med")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "med");

                                            b3.Property<double>("Min")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "min");

                                            b3.Property<double>("P90")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "p90");

                                            b3.Property<double>("P95")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "p95");

                                            b3.HasKey("K6TestDetailedMetricsK6TestResultsK6TestId");

                                            b3.ToTable("K6Tests");

                                            b3.HasAnnotation("Relational:JsonPropertyName", "httpReqDuration");

                                            b3.WithOwner()
                                                .HasForeignKey("K6TestDetailedMetricsK6TestResultsK6TestId");
                                        });

                                    b2.OwnsOne("WebTestUI.Backend.Data.Entities.IterationDurationMetrics", "IterationDuration", b3 =>
                                        {
                                            b3.Property<Guid>("K6TestDetailedMetricsK6TestResultsK6TestId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<double>("Avg")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "avg");

                                            b3.Property<double>("Max")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "max");

                                            b3.Property<double>("Med")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "med");

                                            b3.Property<double>("Min")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "min");

                                            b3.Property<double>("P90")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "p90");

                                            b3.Property<double>("P95")
                                                .HasColumnType("float")
                                                .HasAnnotation("Relational:JsonPropertyName", "p95");

                                            b3.HasKey("K6TestDetailedMetricsK6TestResultsK6TestId");

                                            b3.ToTable("K6Tests");

                                            b3.HasAnnotation("Relational:JsonPropertyName", "iterationDuration");

                                            b3.WithOwner()
                                                .HasForeignKey("K6TestDetailedMetricsK6TestResultsK6TestId");
                                        });

                                    b2.Navigation("HttpReqDuration")
                                        .IsRequired();

                                    b2.Navigation("IterationDuration")
                                        .IsRequired();
                                });

                            b1.OwnsOne("WebTestUI.Backend.Data.Entities.StatusCodeMetrics", "StatusCodes", b2 =>
                                {
                                    b2.Property<Guid>("K6TestResultsK6TestId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Other")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "other");

                                    b2.Property<int>("Status200")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "status_200");

                                    b2.Property<int>("Status201")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "status_201");

                                    b2.Property<int>("Status204")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "status_204");

                                    b2.Property<int>("Status400")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "status_400");

                                    b2.Property<int>("Status401")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "status_401");

                                    b2.Property<int>("Status403")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "status_403");

                                    b2.Property<int>("Status404")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "status_404");

                                    b2.Property<int>("Status415")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "status_415");

                                    b2.Property<int>("Status500")
                                        .HasColumnType("int")
                                        .HasAnnotation("Relational:JsonPropertyName", "status_500");

                                    b2.HasKey("K6TestResultsK6TestId");

                                    b2.ToTable("K6Tests");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "statusCodes");

                                    b2.WithOwner()
                                        .HasForeignKey("K6TestResultsK6TestId");
                                });

                            b1.Navigation("DetailedMetrics");

                            b1.Navigation("StatusCodes")
                                .IsRequired();
                        });

                    b.Navigation("ErrorDetails");

                    b.Navigation("Logs");

                    b.Navigation("Options");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.Request", b =>
                {
                    b.HasOne("WebTestUI.Backend.Data.Entities.Collection", "Collection")
                        .WithMany("Requests")
                        .HasForeignKey("CollectionId");

                    b.HasOne("WebTestUI.Backend.Data.Entities.ApplicationUser", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Environments");

                    b.Navigation("HistoryEntries");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.Collection", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("WebTestUI.Backend.Data.Entities.Request", b =>
                {
                    b.Navigation("HistoryEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
